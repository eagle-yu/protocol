import sys,socket,argsparse

def server(host,port,bytecount):
	sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	sock.bind((host,port))
	sock.listen(1)
	print('Listen at'.sock.getsockname())

	while True:
		sc,scokname = sock.accept()
		print('The connection from :',sockname)
		n = 0 
		while True:
			data = sc.recv(1024)
			if not data:
				break
			output = data.decode('ascii').upper().encode('ascii')
			sc.sendall(ouput)
			n += len(data)
			print(" \r %d byes processed so far" % (n,),end=' ')
			sys.stdout.flush()

			print()
			sc.close()
			print("Socket closed")

def client(host,port.bytecount):
	sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	bytecount = (bytecount+15) // 16*16
	message = b'capilalize this!'

	print('Sending ',bytecount,'bytes of data, in chunks  of 16 bytes')
	sock.connect((host,port))
	sent = 0
	while sent < bytecount:
		sock.sendall(message)
		sent += len(message)
		print('\r %d bytes sent' % (sent,),end='')
		sys.stdout.flush()

		print()
		sock.shutdown(sock.SHUT_WR)

		print('Receiving all the data the server sends back')

	received = 0 
	while True:
		data = sock.recv(42)
		if not data:
			break
		received += len(data)
		print('\r %d bytes received',(received,),end='')

	print()
	sock.close()


if __name__ == '__main__':
	choices = {'client':client,'server':server}
	parser = argsparse.Agumentparser(description='Get deadlocked over TCP')
	parser.add_argument('role',choices=choices,help='which role to choices')
	parser.add_argument('host',help='the server listens at'
						'the client connect to ')
	parser.add_argument('bytecount',type=int,default=16,
						help='number of the client send to (defaul 16)')
	parser.add_argument('-p',metavar='PORT',type=int,default=1060,help=' TCP port (default 1060)')
	args = parser.parser_args()
	function = choices[parser.role]
	function(parser.host,parser.p,parser.bytecount)
	


import sys,socket,argsparse

def server(host,port,bytecount):
	sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	sock.bind((host,port))
	sock.listen(1)
	print('Listen at'.sock.getsockname())

	while True:
		sc,scokname = sock.accept()
		print('The connection from :',sockname)
		n = 0 
		while True:
			data = sc.recv(1024)
			if not data:
				break
			output = data.decode('ascii').upper().encode('ascii')
			sc.sendall(ouput)
			n += len(data)
			print(" \r %d byes processed so far" % (n,),end=' ')
			sys.stdout.flush()

			print()
			sc.close()
			print("Socket closed")

def client(host,port.bytecount):
	sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	bytecount = (bytecount+15) // 16*16
	message = b'capilalize this!'

	print('Sending ',bytecount,'bytes of data, in chunks  of 16 bytes')
	sock.connect((host,port))
	sent = 0
	while sent < bytecount:
		sock.sendall(message)
		sent += len(message)
		print('\r %d bytes sent' % (sent,),end='')
		sys.stdout.flush()

		print()
		sock.shutdown(sock.SHUT_WR)

		print('Receiving all the data the server sends back')

	received = 0 
	while True:
		data = sock.recv(42)
		if not data:
			break
		received += len(data)
		print('\r %d bytes received',(received,),end='')

	print()
	sock.close()


if __name__ == '__main__':
	choices = {'client':client,'server':server}
	parser = argsparse.Agumentparser(description='Get deadlocked over TCP')
	parser.add_argument('role',choices=choices,help='which role to choices')
	parser.add_argument('host',help='the server listens at'
						'the client connect to ')
	parser.add_argument('bytecount',type=int,default=16,
						help='number of the client send to (defaul 16)')
	parser.add_argument('-p',metavar='PORT',type=int,default=1060,help=' TCP port (default 1060)')
	args = parser.parser_args()
	function = choices[parser.role]
	function(parser.host,parser.p,parser.bytecount)
